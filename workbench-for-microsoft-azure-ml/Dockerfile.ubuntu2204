FROM product-base-pro AS build
LABEL maintainer="Posit Docker <docker@posit.co>"

ARG DEBIAN_FRONTEND=noninteractive
ARG R_VERSION=4.2.3
ARG R_VERSION_ALT=4.1.3
ARG PYTHON_VERSION=3.9.17
ARG PYTHON_VERSION_ALT=3.8.17
ARG PYTHON_VERSION_JUPYTER=3.8.17
ARG JUPYTERLAB_VERSION=3.6.7
ARG RSW_VERSION=2025.09.1+401.pro2
ARG RSW_NAME=rstudio-workbench
ARG RSW_DOWNLOAD_URL=https://download2.rstudio.org/server/jammy/amd64
ARG SCRIPTS_DIR=/opt/positscripts

# Set default env values
ENV STARTUP_DEBUG_MODE 0
ENV RSW_LICENSE ""
ENV RSW_LICENSE_SERVER ""
ENV USER_NAME azureuser
ENV USER_PASSWORD ""
ENV PUID 1001
ENV PGID 1001
ENV RSW_LAUNCHER true
ENV RSW_LAUNCHER_TIMEOUT 30
ENV DIAGNOSTIC_DIR /var/log/rstudio
ENV DIAGNOSTIC_ENABLE false
ENV DIAGNOSTIC_ONLY false

ENV WORKBENCH_JUPYTER_PATH=/usr/local/bin/jupyter

COPY --chmod=0644 TurboActivate.dat /opt/rstudio-license/license-manager.conf
COPY deps/* /tmp

SHELL ["/bin/bash", "-o", "pipefail", "-c"]
RUN apt-get update --fix-missing \
    && apt-get upgrade -yq \
    && xargs -a /tmp/apt_packages.txt apt-get install -yq --no-install-recommends \
    && rm /tmp/apt_packages.txt \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update \
    && curl -fsSL -o rstudio-workbench.deb "${RSW_DOWNLOAD_URL}/${RSW_NAME}-${RSW_VERSION//+/-}-amd64.deb" \
    # Post 7/25 packages
    && gpg --keyserver keys.openpgp.org --recv-keys 51C0B5BB19F92D60 \
    && dpkg-sig --verify ./rstudio-workbench.deb \
    && apt-get install -yq --no-install-recommends ./rstudio-workbench.deb \
    # a wild hack to ensure that workbench can install _and start_ completely before shutdown
    && sleep 30 \
    && rm ./rstudio-workbench.deb \
    && mkdir -p /opt/rstudio-license/ \
    && mkdir -p /var/lib/rstudio-workbench/ \
    && curl -fsSL "https://s3.amazonaws.com/rstudio-ide-build/monitor/jammy/rsp-monitor-workbench-azureml-amd64-${RSW_VERSION//+/-}.tar.gz" \
    | tar xzvf - --strip 2 -C /opt/rstudio-license/ \
    && chmod 0755 /opt/rstudio-license/license-manager \
    && mv /opt/rstudio-license/license-manager /opt/rstudio-license/license-manager-orig \
    && rm -f /usr/lib/rstudio-server/bin/license-manager \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /var/lib/rstudio-server/r-versions \
    && rm -rf /var/lib/rstudio-launcher/Local/jobs/*

# Workaround to ensure no pre-generated certificates are included in image distributions.
# This happens in the step immediately following Workbench installation in case the certificates are generated.
RUN rm -f /etc/rstudio/launcher.pem /etc/rstudio/launcher.pub

### Install Quarto to PATH ###
RUN ln -s /lib/rstudio-server/bin/quarto/bin/quarto /usr/local/bin/quarto

### Install TinyTeX using Quarto ###
RUN HOME="/opt" $SCRIPTS_DIR/install_quarto.sh --install-tinytex --add-path-tinytex

COPY --chmod=0755 license-manager-shim /opt/rstudio-license/license-manager
COPY --chmod=0775 startup.sh /usr/local/bin/startup.sh
COPY startup/* /startup/base/
COPY startup-launcher/* /startup/launcher/
COPY startup/* /startup/base/
COPY supervisord.conf /etc/supervisor/supervisord.conf

### Install R and R Packages ###
RUN apt-get update --fix-missing -qq \
    && /tmp/install-r.sh \
    && rm /tmp/install-r.sh \
    && rm /tmp/r_packages.txt \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

### Install Jupyter and extensions ###
RUN /opt/python/"${PYTHON_VERSION_JUPYTER}"/bin/python -m venv /opt/python/jupyter \
    && /opt/python/jupyter/bin/python -m pip install --upgrade pip setuptools \
    && /opt/python/jupyter/bin/pip install \
      jupyterlab~=4.2.4 \
      notebook \
      pwb_jupyterlab~=1.0 \
    && ln -s /opt/python/jupyter/bin/jupyter /usr/local/bin/jupyter \
    && /opt/python/${PYTHON_VERSION}/bin/python -m pip install ipykernel \
    && /opt/python/${PYTHON_VERSION_ALT}/bin/python -m pip install ipykernel \
    && /opt/python/${PYTHON_VERSION}/bin/python -m ipykernel install --name py${PYTHON_VERSION} --display-name "Python ${PYTHON_VERSION}" \
    && /opt/python/${PYTHON_VERSION_ALT}/bin/python -m ipykernel install --name py${PYTHON_VERSION_ALT} --display-name "Python ${PYTHON_VERSION_ALT}" \
    && /opt/python/jupyter/bin/python3 -m pip cache purge

### Install basic data science packages for Python and R ###
COPY deps/* /
RUN /opt/python/${PYTHON_VERSION}/bin/python3 -m pip install -U pip setuptools wheel \
    && /opt/python/${PYTHON_VERSION}/bin/python3 -m pip install -r /tmp/py_packages.txt \
    && /opt/python/${PYTHON_VERSION}/bin/python3 -m pip cache purge \
    && /opt/python/${PYTHON_VERSION_ALT}/bin/python3 -m pip install -U pip setuptools wheel \
    && /opt/python/${PYTHON_VERSION_ALT}/bin/python3 -m pip install -r /tmp/py_packages.txt \
    && /opt/python/${PYTHON_VERSION_ALT}/bin/python3 -m pip cache purge \
    && rm /tmp/py_packages.txt

ADD --chmod=755 https://raw.githubusercontent.com/rstudio/wait-for-it/master/wait-for-it.sh /usr/local/bin/wait-for-it.sh

RUN curl -fsSL https://aka.ms/InstallAzureCLIDeb | bash \
    && az extension add -n ml -y

COPY conf/* /etc/rstudio/
COPY landing/* /usr/lib/rstudio-server/www/

EXPOSE 8787/tcp
EXPOSE 5559/tcp

ENTRYPOINT []
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/supervisord.conf"]


FROM build AS clamav

# Set up ClamAV
RUN apt-get update \
    && apt-get install --no-install-recommends -y clamav \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Reconfigure freshclam to get database from our S3 location
ARG CLAMAV_MIRROR=https://cdn.rstudio.com/platform/clamav
SHELL ["/bin/bash", "-o", "pipefail", "-c"]
RUN grep -v "DatabaseMirror" /etc/clamav/freshclam.conf > /etc/clamav/freshclam.conf.new \
    && echo "DatabaseMirror ${CLAMAV_MIRROR}" >> /etc/clamav/freshclam.conf.new \
    && mv /etc/clamav/freshclam.conf.new /etc/clamav/freshclam.conf

# Update ClamAV
RUN freshclam --log="/var/log/clamav/clamupdate.log"

# Scan all but /sys for viruses. If this fails, the Docker build will fail.
#
# --exclude options are false positives per rstudio/rstudio-docker-products#704.
# They can likely be removed in the future after ClamAV's database is updated.
RUN clamscan \
    --recursive \
    --infected \
    --exclude-dir="^/sys" \
    --exclude="/opt/az/lib/python[0-9.]+/ensurepip/_bundled/pip-[0-9.]+-py3-none-any.whl" \
    --exclude="/opt/az/lib/python[0-9.]+site-packages/pip/_vendor/distlib/w32.exe" \
    --exclude="/opt/az/lib/python[0-9.]+/site-packages/pip/_vendor/distlib/w64-arm.exe" \
    --exclude="/opt/az/lib/python[0-9.]+/site-packages/pip/_vendor/distlib/t64-arm.exe" \
    --log "/var/log/clamav/clamscan.log" /


# Ignore the intermediate 'clamav' multi-stage build step so we don't distribute
# with ClamAV installed. Avoid adding changes in this stage unless they are related
# to the ClamAV stage. Since the ClamAV stage may be cached, you can't guarantee
# another full scan if you change anything beyond this point.
FROM build AS final

# Copy ClamAV scan logs so the end user can see them.
COPY --from=clamav /var/log/clamav/clamscan.log /var/log/clamav/clamupdate.log /

LABEL \
     azure.ii.language='en-US' \
     azure.ii.support.stage='preview' \
     azure.ii.privacy='{"tracking":false,"ads":false,"network-traffic":true}' \
     azure.ii.auth='{"disable":"DISABLE_AUTH"}' \
     azure.ii.user='{"mode":"entry_point","name":"USER_NAME","uid":"PUID","gid":"PGID"}' \
     azure.ii.locale='{"tz":"TZ","lang":"LANG"}' \
     azure.ii.endpoints='[{"label":"connect","target":8787,"protocol":"http"}]' \
     org.opencontainers.image.description='A professional integrated development environment for data science teams using R and Python' \
     org.opencontainers.image.title='RStudio Workbench' \
     org.opencontainers.image.version='2025.09.1+401.pro2' \
     org.opencontainers.image.url='https://www.rstudio.com/products/workbench/'
